generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @unique
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.VarChar(300)
  access_token       String? @db.VarChar(300)
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  verification_token String? @db.VarChar(300)
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  accounts      Account[]
  sessions      Session[]
}

model Characters {
  id        Int     @id @default(autoincrement())
  name      String? @db.VarChar(20)
  race_id   Int
  class_id  Int
  owner_id  String? @db.VarChar(50)
  maxHP     Int?
  currentHP Int?
  str       Int?
  dex       Int?
  con       Int?
  int       Int?
  wis       Int?
  char      Int?
  race      Race    @relation(fields: [race_id], references: [id], onDelete: Cascade)
  class     Class   @relation(fields: [class_id], references: [id], onDelete: Cascade)
}

model Class {
  name        String
  id          Int                @id @default(autoincrement())
  description String?            @db.VarChar(255)
  character   Characters[]
  spells      SpellsForClasses[]
}

model Race {
  name        String
  id          Int          @id @default(autoincrement())
  description String?      @db.VarChar(255)
  dex         Int?
  str         Int?
  con         Int?
  int         Int?
  wis         Int?
  char        Int?
  character   Characters[]
}

model Spell {
  name        String             @unique
  id          Int                @id @default(autoincrement())
  description String?            @db.VarChar(500)
  damage      Int?
  cooldown    Int?
  classes     SpellsForClasses[]
}

model SpellsForClasses {
  spellId Int
  classId Int
  spell   Spell @relation(fields: [spellId], references: [id])
  class   Class @relation(fields: [classId], references: [id])

  @@id([spellId, classId])
}

model Login {
  id       Int     @id @default(autoincrement())
  username String? @db.VarChar(30)
  password String? @db.VarChar(30)
}

model Premium_Membership {
  id       String   @id
  userId   String   @unique
  paidDate DateTime
  status   String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
